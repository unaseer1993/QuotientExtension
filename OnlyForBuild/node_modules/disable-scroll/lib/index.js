'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

require('scrollingelement');

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

var DisableScroll = function () {
  function DisableScroll() {
    var _this = this;

    _classCallCheck(this, DisableScroll);

    this.handleWheel = function (e) {
      e.preventDefault();
    };

    this.handleScroll = function () {
      var _window;

      (_window = window).scrollTo.apply(_window, _toConsumableArray(_this.lockToScrollPos));
    };

    this.handleKeydown = function (e) {
      var keys = [].concat(_toConsumableArray(_this.options.keyboardKeys));

      /* istanbul ignore else */
      if (['INPUT', 'TEXTAREA'].includes(e.target.tagName)) {
        keys = keys.slice(1);
      }

      /* istanbul ignore else */
      if (keys.includes(e.keyCode)) {
        e.preventDefault();
      }
    };

    this.options = {
      disableWheel: true,
      disableScroll: true,
      disableKeys: true,
      keyboardKeys: [32, 33, 34, 35, 36, 37, 38, 39, 40]
      // space: 32, page up: 33, page down: 34, end: 35, home: 36
      // left: 37, up: 38, right: 39, down: 40
    };

    this.element = canUseDOM ? document.scrollingElement : null;
    this.lockToScrollPos = [0, 0];
  }

  /**
   * Disable Page Scroll
   * @external Node
   *
   * @param {HTMLElement} [element] - DOM Element, usually document.body
   * @param {object} [options] - Change the initial options
   */


  _createClass(DisableScroll, [{
    key: 'on',
    value: function on(element, options) {
      if (!canUseDOM) return;

      this.element = element || this.element;
      this.options = _extends({}, this.options, options);

      var _options = this.options,
          disableKeys = _options.disableKeys,
          disableScroll = _options.disableScroll,
          disableWheel = _options.disableWheel;

      /* istanbul ignore else */

      if (disableWheel) {
        document.addEventListener('wheel', this.handleWheel);
        document.addEventListener('touchmove', this.handleWheel);
      }

      /* istanbul ignore else */
      if (disableScroll) {
        this.lockToScrollPos = [this.element.scrollLeft || this.element.scrollX, this.element.scrollTop || this.element.scrollY];
        document.addEventListener('scroll', this.handleScroll);
      }

      /* istanbul ignore else */
      if (disableKeys) {
        document.addEventListener('keydown', this.handleKeydown);
      }
    }

    /**
     * Re-enable page scrolls
     */

  }, {
    key: 'off',
    value: function off() {
      if (!canUseDOM) return;

      document.removeEventListener('wheel', this.handleWheel);
      document.removeEventListener('touchmove', this.handleWheel);
      document.removeEventListener('scroll', this.handleScroll);
      document.removeEventListener('keydown', this.handleKeydown);
    }
  }]);

  return DisableScroll;
}();

exports.default = new DisableScroll();